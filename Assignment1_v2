import numpy as np
import math as m
import pandas as pd
import os
import matplotlib.pyplot as plt
os.chdir('Assignment_data')

#V0=8
R=89.17
rho=1.225
#omega=2.61
#pitch=-3*m.pi/180
#beta=2*m.pi/180

#c=0.5
#Cl=0.5
#Cd=0.01
eps=1e-5
#r = 24.5
B=3

files=['FFA-W3-241.txt','FFA-W3-301.txt','FFA-W3-360.txt','FFA-W3-480.txt','FFA-W3-600.txt','cylinder.txt']
#Initializing tables    
cl_tab=np.zeros([105,6])
cd_tab=np.zeros([105,6])
cm_tab=np.zeros([105,6])
aoa_tab=np.zeros([105,])
#Readin of tables. Only do this once at startup of simulation
for i in range(np.size(files)):
    aoa_tab[:],cl_tab[:,i],cd_tab[:,i],cm_tab[:,i] = np.loadtxt(files[i], skiprows=0).T

# Thickness of the airfoils considered
# NOTE THAT IN PYTHON THE INTERPOLATION REQUIRES THAT THE VALUES INCREASE IN THE VECTOR!

thick_prof=np.zeros(6)
thick_prof[0]=24.1;
thick_prof[1]=30.1;
thick_prof[2]=36;
thick_prof[3]=48;
thick_prof[4]=60;
thick_prof[5]=100;

def cp_loop(B,ac,eps,max_iteration=10000): 
    blade=pd.read_csv('bladedat.txt',delimiter='\t',header=None)
    list_cp=[]
    list_radius=list(blade[0])[:-1]
    V0=8
    for TSR in np.arange(7,11,1):
        omega=TSR*V0/R
        
        for theta_p in np.arange(-1,2,0.5):
            theta_p*=np.pi/180
            P,T=0,0

            for i,r in enumerate(list_radius) :
                #print(r)
                c=list(blade[2].loc[blade[0]==r])[0]
                beta=list(blade[1].loc[blade[0]==r])[0]
                #print("beta ",beta)
                beta=beta*np.pi/180
                t_perc=list(blade[3].loc[blade[0]==r])[0]

                solidity=c*B/(2*np.pi*r)
                
                a,a_prime,Cn,Ct,CT,F,phi,count=bem_algorithm(r,solidity, TSR, B, beta, theta_p, t_perc, ac, eps, max_iteration)
                
                Vrel=np.sqrt((V0-a*V0)**2+((a_prime+1)*omega*r)**2)

                pn=0.5*rho*Vrel**2*c*Cn
                pt=0.5*rho*Vrel**2*c*Ct
                #print(pt,pn)
                if i==0:
                    P=omega*B*pt*r*(list_radius[i]-0)
                    T=B*pn*(list_radius[i]-0)
                    #CP2= TSR*B*(1-a)**2*Ct / (2*np.pi*np.sin(phi)**2) * c/R * (list_radius[i]-0)
                    #CP3= (1-a)*Ct*8*F*r/(2*Cn) * (list_radius[i]-0)
                else :
                    P+=omega*B*pt*r*(list_radius[i]-list_radius[i-1])
                    T+=B*pn*(list_radius[i]-list_radius[i-1])
                    #CP2+= TSR*B*(1-a)**2*Ct / (2*np.pi*np.sin(phi)**2) * c/R * (list_radius[i]-list_radius[i-1])
                    #CP3+= (1-a)*Ct*8*F*r/(2*Cn) * (list_radius[i]-list_radius[i-1])

            CP=P/(0.5*rho*V0**3*np.pi*R**2)
            list_cp.append([TSR,theta_p,CP,P])
    return(list_cp)
                
                
def force_coeffs_10MW(angle_of_attack,thick,aoa_tab,cl_tab,cd_tab,cm_tab):
    
    cl_aoa=np.zeros([1,6])
    cd_aoa=np.zeros([1,6])
    cm_aoa=np.zeros([1,6])
    

    #Interpolate to current angle of attack:
    for i in range(np.size(files)):
        cl_aoa[0,i]=np.interp (angle_of_attack,aoa_tab,cl_tab[:,i])
        cd_aoa[0,i]=np.interp (angle_of_attack,aoa_tab,cd_tab[:,i])
        cm_aoa[0,i]=np.interp (angle_of_attack,aoa_tab,cm_tab[:,i])
    
    #Interpolate to current thickness:
    cl=np.interp (thick,thick_prof,cl_aoa[0,:])
    cd=np.interp (thick,thick_prof,cd_aoa[0,:])
    cm=np.interp (thick,thick_prof,cm_aoa[0,:])


    return cl, cd, cm 




def update_a(a_old,ac,CT,F,phi,solidity,Cn):
    if a_old<=ac :
            a_new= CT/(4*F*(1-a_old))
    else :
        if ac==1/3 :
            a_et = CT / (4*F*(1-1/4 * (5 - 3 *a_old)*a_old))
            a_new = 0.1*a_et + (1-0.1)*a_old
        if ac==0.2 :
            K = (4*F*np.sin(phi)**2)/(solidity*Cn)
            a_new = 1 + K/2 *(1- 2*ac) - 1/2 * np.sqrt((K*(1-2*ac)+2)**2+4*(K*ac**2-1))
    return(a_new)

def update_a_prime(a_prime_old,F,phi,solidity,Ct):       
    return(Ct * solidity * (1+a_prime_old) / (4*F*np.sin(phi)*np.cos(phi)))

def bem_algorithm(r,solidity, TSR, B, beta, theta_p, t_perc, ac, eps, max_iteration):

    a_new, a_prime_new = 0, 0

    k, count = 0, 0

    while k==0:

        count+=1
                
        a_old, a_prime_old = a_new, a_prime_new

        phi=np.arctan(((1-a_old)*R)/((1+a_prime_old)*TSR*r))
        #print("phi ",phi*180/np.pi)
        theta = beta + theta_p
        #print(beta*180/np.pi)
        alpha = phi - theta
        
        Cl,Cd,Cm = force_coeffs_10MW(alpha*180/np.pi,t_perc,aoa_tab,cl_tab,cd_tab,cm_tab)
        #print(Cl,Cd)
        Cn = Cl * np.cos(phi) + Cd * np.sin(phi)
        Ct = Cl * np.sin(phi) - Cd * np.cos(phi)
        
        F = 2/np.pi * np.arccos(np.exp(-B/2 * (R-r)/(r * np.sin(abs(phi)))))

        CT=(1-a_old)**2*solidity*Cn/np.sin(phi)**2

        a_new = update_a(a_old,ac,CT,F,phi,solidity,Cn)
        a_prime_new = update_a_prime(a_prime_old,F,phi,solidity,Ct)

        if abs(a_new - a_old) < eps and abs(a_prime_new - a_prime_old) < eps:
            k=1
        if count>max_iteration :
            k=1
            print('not converged')
    #print(a_new,a_prime_new)
    return(a_new,a_prime_new,Cn,Ct,CT,F,phi,count)


list_cp=np.array(cp_loop(B,1/3,eps,max_iteration=100000))


Cp_max, TSR_max, theta_p_max, P_max = 0, 0, 0, 0
for i in range (0,len(list_cp)):
    if list_cp[i,2]>=Cp_max :
        Cp_max = list_cp[i,2]
        TSR_max = list_cp[i,0]
        theta_p_max = list_cp[i,1]
        P_max = list_cp[i,3]
print(Cp_max, TSR_max, theta_p_max, P_max)

plt.contour(list_cp[:,:2].T,list_cp[:,2],levels=np.arange(0.1,1,0.1))
plt.show()
